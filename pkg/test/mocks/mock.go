// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "L0task/pkg/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrder is a mock of Order interface.
type MockOrder struct {
	ctrl     *gomock.Controller
	recorder *MockOrderMockRecorder
}

// MockOrderMockRecorder is the mock recorder for MockOrder.
type MockOrderMockRecorder struct {
	mock *MockOrder
}

// NewMockOrder creates a new mock instance.
func NewMockOrder(ctrl *gomock.Controller) *MockOrder {
	mock := &MockOrder{ctrl: ctrl}
	mock.recorder = &MockOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrder) EXPECT() *MockOrderMockRecorder {
	return m.recorder
}

// BuildOrder mocks base method.
func (m *MockOrder) BuildOrder(orderDbDto model.OrderDbDto) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildOrder", orderDbDto)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildOrder indicates an expected call of BuildOrder.
func (mr *MockOrderMockRecorder) BuildOrder(orderDbDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildOrder", reflect.TypeOf((*MockOrder)(nil).BuildOrder), orderDbDto)
}

// GetAllCachedOrders mocks base method.
func (m *MockOrder) GetAllCachedOrders() ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCachedOrders")
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCachedOrders indicates an expected call of GetAllCachedOrders.
func (mr *MockOrderMockRecorder) GetAllCachedOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCachedOrders", reflect.TypeOf((*MockOrder)(nil).GetAllCachedOrders))
}

// GetAllOrders mocks base method.
func (m *MockOrder) GetAllOrders() ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders")
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOrderMockRecorder) GetAllOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOrder)(nil).GetAllOrders))
}

// GetCachedOrderByUid mocks base method.
func (m *MockOrder) GetCachedOrderByUid(orderUid string) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedOrderByUid", orderUid)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachedOrderByUid indicates an expected call of GetCachedOrderByUid.
func (mr *MockOrderMockRecorder) GetCachedOrderByUid(orderUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedOrderByUid", reflect.TypeOf((*MockOrder)(nil).GetCachedOrderByUid), orderUid)
}

// GetOrderByUid mocks base method.
func (m *MockOrder) GetOrderByUid(orderUid string) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByUid", orderUid)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByUid indicates an expected call of GetOrderByUid.
func (mr *MockOrderMockRecorder) GetOrderByUid(orderUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByUid", reflect.TypeOf((*MockOrder)(nil).GetOrderByUid), orderUid)
}

// SetOrder mocks base method.
func (m *MockOrder) SetOrder(order model.Order) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrder", order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetOrder indicates an expected call of SetOrder.
func (mr *MockOrderMockRecorder) SetOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrder", reflect.TypeOf((*MockOrder)(nil).SetOrder), order)
}

// SetOrderInCache mocks base method.
func (m *MockOrder) SetOrderInCache(order model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrderInCache", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrderInCache indicates an expected call of SetOrderInCache.
func (mr *MockOrderMockRecorder) SetOrderInCache(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrderInCache", reflect.TypeOf((*MockOrder)(nil).SetOrderInCache), order)
}

// SetOrdersFromDbToCache mocks base method.
func (m *MockOrder) SetOrdersFromDbToCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrdersFromDbToCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrdersFromDbToCache indicates an expected call of SetOrdersFromDbToCache.
func (mr *MockOrderMockRecorder) SetOrdersFromDbToCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrdersFromDbToCache", reflect.TypeOf((*MockOrder)(nil).SetOrdersFromDbToCache))
}

// MockDelivery is a mock of Delivery interface.
type MockDelivery struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryMockRecorder
}

// MockDeliveryMockRecorder is the mock recorder for MockDelivery.
type MockDeliveryMockRecorder struct {
	mock *MockDelivery
}

// NewMockDelivery creates a new mock instance.
func NewMockDelivery(ctrl *gomock.Controller) *MockDelivery {
	mock := &MockDelivery{ctrl: ctrl}
	mock.recorder = &MockDeliveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelivery) EXPECT() *MockDeliveryMockRecorder {
	return m.recorder
}

// GetAllDeliveries mocks base method.
func (m *MockDelivery) GetAllDeliveries() ([]model.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDeliveries")
	ret0, _ := ret[0].([]model.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDeliveries indicates an expected call of GetAllDeliveries.
func (mr *MockDeliveryMockRecorder) GetAllDeliveries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDeliveries", reflect.TypeOf((*MockDelivery)(nil).GetAllDeliveries))
}

// GetDeliveryById mocks base method.
func (m *MockDelivery) GetDeliveryById(deliveryId int) (model.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliveryById", deliveryId)
	ret0, _ := ret[0].(model.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliveryById indicates an expected call of GetDeliveryById.
func (mr *MockDeliveryMockRecorder) GetDeliveryById(deliveryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliveryById", reflect.TypeOf((*MockDelivery)(nil).GetDeliveryById), deliveryId)
}

// SetDelivery mocks base method.
func (m *MockDelivery) SetDelivery(delivery model.Delivery) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDelivery", delivery)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDelivery indicates an expected call of SetDelivery.
func (mr *MockDeliveryMockRecorder) SetDelivery(delivery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDelivery", reflect.TypeOf((*MockDelivery)(nil).SetDelivery), delivery)
}

// MockPayment is a mock of Payment interface.
type MockPayment struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentMockRecorder
}

// MockPaymentMockRecorder is the mock recorder for MockPayment.
type MockPaymentMockRecorder struct {
	mock *MockPayment
}

// NewMockPayment creates a new mock instance.
func NewMockPayment(ctrl *gomock.Controller) *MockPayment {
	mock := &MockPayment{ctrl: ctrl}
	mock.recorder = &MockPaymentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayment) EXPECT() *MockPaymentMockRecorder {
	return m.recorder
}

// GetAllPayments mocks base method.
func (m *MockPayment) GetAllPayments() ([]model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPayments")
	ret0, _ := ret[0].([]model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPayments indicates an expected call of GetAllPayments.
func (mr *MockPaymentMockRecorder) GetAllPayments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPayments", reflect.TypeOf((*MockPayment)(nil).GetAllPayments))
}

// GetPaymentById mocks base method.
func (m *MockPayment) GetPaymentById(paymentId int) (model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentById", paymentId)
	ret0, _ := ret[0].(model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentById indicates an expected call of GetPaymentById.
func (mr *MockPaymentMockRecorder) GetPaymentById(paymentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentById", reflect.TypeOf((*MockPayment)(nil).GetPaymentById), paymentId)
}

// SetPayment mocks base method.
func (m *MockPayment) SetPayment(payment model.Payment) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPayment", payment)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPayment indicates an expected call of SetPayment.
func (mr *MockPaymentMockRecorder) SetPayment(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPayment", reflect.TypeOf((*MockPayment)(nil).SetPayment), payment)
}

// MockItem is a mock of Item interface.
type MockItem struct {
	ctrl     *gomock.Controller
	recorder *MockItemMockRecorder
}

// MockItemMockRecorder is the mock recorder for MockItem.
type MockItemMockRecorder struct {
	mock *MockItem
}

// NewMockItem creates a new mock instance.
func NewMockItem(ctrl *gomock.Controller) *MockItem {
	mock := &MockItem{ctrl: ctrl}
	mock.recorder = &MockItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItem) EXPECT() *MockItemMockRecorder {
	return m.recorder
}

// GetAllItems mocks base method.
func (m *MockItem) GetAllItems() ([]model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllItems")
	ret0, _ := ret[0].([]model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllItems indicates an expected call of GetAllItems.
func (mr *MockItemMockRecorder) GetAllItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllItems", reflect.TypeOf((*MockItem)(nil).GetAllItems))
}

// GetItemById mocks base method.
func (m *MockItem) GetItemById(itemId int) (model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemById", itemId)
	ret0, _ := ret[0].(model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemById indicates an expected call of GetItemById.
func (mr *MockItemMockRecorder) GetItemById(itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemById", reflect.TypeOf((*MockItem)(nil).GetItemById), itemId)
}

// SetItem mocks base method.
func (m *MockItem) SetItem(item model.Item) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetItem", item)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetItem indicates an expected call of SetItem.
func (mr *MockItemMockRecorder) SetItem(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetItem", reflect.TypeOf((*MockItem)(nil).SetItem), item)
}

// MockOrderItems is a mock of OrderItems interface.
type MockOrderItems struct {
	ctrl     *gomock.Controller
	recorder *MockOrderItemsMockRecorder
}

// MockOrderItemsMockRecorder is the mock recorder for MockOrderItems.
type MockOrderItemsMockRecorder struct {
	mock *MockOrderItems
}

// NewMockOrderItems creates a new mock instance.
func NewMockOrderItems(ctrl *gomock.Controller) *MockOrderItems {
	mock := &MockOrderItems{ctrl: ctrl}
	mock.recorder = &MockOrderItemsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderItems) EXPECT() *MockOrderItemsMockRecorder {
	return m.recorder
}

// GetOrderItemsByOrderUid mocks base method.
func (m *MockOrderItems) GetOrderItemsByOrderUid(orderUid string) ([]model.OrderItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemsByOrderUid", orderUid)
	ret0, _ := ret[0].([]model.OrderItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemsByOrderUid indicates an expected call of GetOrderItemsByOrderUid.
func (mr *MockOrderItemsMockRecorder) GetOrderItemsByOrderUid(orderUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemsByOrderUid", reflect.TypeOf((*MockOrderItems)(nil).GetOrderItemsByOrderUid), orderUid)
}

// SetOrderItems mocks base method.
func (m *MockOrderItems) SetOrderItems(orderUid string, items []model.Item) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrderItems", orderUid, items)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetOrderItems indicates an expected call of SetOrderItems.
func (mr *MockOrderItemsMockRecorder) SetOrderItems(orderUid, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrderItems", reflect.TypeOf((*MockOrderItems)(nil).SetOrderItems), orderUid, items)
}

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// BuildOrder mocks base method.
func (m *MockIService) BuildOrder(orderDbDto model.OrderDbDto) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildOrder", orderDbDto)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildOrder indicates an expected call of BuildOrder.
func (mr *MockIServiceMockRecorder) BuildOrder(orderDbDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildOrder", reflect.TypeOf((*MockIService)(nil).BuildOrder), orderDbDto)
}

// GetAllCachedOrders mocks base method.
func (m *MockIService) GetAllCachedOrders() ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCachedOrders")
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCachedOrders indicates an expected call of GetAllCachedOrders.
func (mr *MockIServiceMockRecorder) GetAllCachedOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCachedOrders", reflect.TypeOf((*MockIService)(nil).GetAllCachedOrders))
}

// GetAllDeliveries mocks base method.
func (m *MockIService) GetAllDeliveries() ([]model.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDeliveries")
	ret0, _ := ret[0].([]model.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDeliveries indicates an expected call of GetAllDeliveries.
func (mr *MockIServiceMockRecorder) GetAllDeliveries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDeliveries", reflect.TypeOf((*MockIService)(nil).GetAllDeliveries))
}

// GetAllItems mocks base method.
func (m *MockIService) GetAllItems() ([]model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllItems")
	ret0, _ := ret[0].([]model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllItems indicates an expected call of GetAllItems.
func (mr *MockIServiceMockRecorder) GetAllItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllItems", reflect.TypeOf((*MockIService)(nil).GetAllItems))
}

// GetAllOrders mocks base method.
func (m *MockIService) GetAllOrders() ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders")
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockIServiceMockRecorder) GetAllOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockIService)(nil).GetAllOrders))
}

// GetAllPayments mocks base method.
func (m *MockIService) GetAllPayments() ([]model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPayments")
	ret0, _ := ret[0].([]model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPayments indicates an expected call of GetAllPayments.
func (mr *MockIServiceMockRecorder) GetAllPayments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPayments", reflect.TypeOf((*MockIService)(nil).GetAllPayments))
}

// GetCachedOrderByUid mocks base method.
func (m *MockIService) GetCachedOrderByUid(orderUid string) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedOrderByUid", orderUid)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachedOrderByUid indicates an expected call of GetCachedOrderByUid.
func (mr *MockIServiceMockRecorder) GetCachedOrderByUid(orderUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedOrderByUid", reflect.TypeOf((*MockIService)(nil).GetCachedOrderByUid), orderUid)
}

// GetDeliveryById mocks base method.
func (m *MockIService) GetDeliveryById(deliveryId int) (model.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliveryById", deliveryId)
	ret0, _ := ret[0].(model.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliveryById indicates an expected call of GetDeliveryById.
func (mr *MockIServiceMockRecorder) GetDeliveryById(deliveryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliveryById", reflect.TypeOf((*MockIService)(nil).GetDeliveryById), deliveryId)
}

// GetItemById mocks base method.
func (m *MockIService) GetItemById(itemId int) (model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemById", itemId)
	ret0, _ := ret[0].(model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemById indicates an expected call of GetItemById.
func (mr *MockIServiceMockRecorder) GetItemById(itemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemById", reflect.TypeOf((*MockIService)(nil).GetItemById), itemId)
}

// GetOrderByUid mocks base method.
func (m *MockIService) GetOrderByUid(orderUid string) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByUid", orderUid)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByUid indicates an expected call of GetOrderByUid.
func (mr *MockIServiceMockRecorder) GetOrderByUid(orderUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByUid", reflect.TypeOf((*MockIService)(nil).GetOrderByUid), orderUid)
}

// GetOrderItemsByOrderUid mocks base method.
func (m *MockIService) GetOrderItemsByOrderUid(orderUid string) ([]model.OrderItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemsByOrderUid", orderUid)
	ret0, _ := ret[0].([]model.OrderItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemsByOrderUid indicates an expected call of GetOrderItemsByOrderUid.
func (mr *MockIServiceMockRecorder) GetOrderItemsByOrderUid(orderUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemsByOrderUid", reflect.TypeOf((*MockIService)(nil).GetOrderItemsByOrderUid), orderUid)
}

// GetPaymentById mocks base method.
func (m *MockIService) GetPaymentById(paymentId int) (model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentById", paymentId)
	ret0, _ := ret[0].(model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentById indicates an expected call of GetPaymentById.
func (mr *MockIServiceMockRecorder) GetPaymentById(paymentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentById", reflect.TypeOf((*MockIService)(nil).GetPaymentById), paymentId)
}

// SetDelivery mocks base method.
func (m *MockIService) SetDelivery(delivery model.Delivery) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDelivery", delivery)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDelivery indicates an expected call of SetDelivery.
func (mr *MockIServiceMockRecorder) SetDelivery(delivery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDelivery", reflect.TypeOf((*MockIService)(nil).SetDelivery), delivery)
}

// SetItem mocks base method.
func (m *MockIService) SetItem(item model.Item) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetItem", item)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetItem indicates an expected call of SetItem.
func (mr *MockIServiceMockRecorder) SetItem(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetItem", reflect.TypeOf((*MockIService)(nil).SetItem), item)
}

// SetOrder mocks base method.
func (m *MockIService) SetOrder(order model.Order) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrder", order)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetOrder indicates an expected call of SetOrder.
func (mr *MockIServiceMockRecorder) SetOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrder", reflect.TypeOf((*MockIService)(nil).SetOrder), order)
}

// SetOrderInCache mocks base method.
func (m *MockIService) SetOrderInCache(order model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrderInCache", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrderInCache indicates an expected call of SetOrderInCache.
func (mr *MockIServiceMockRecorder) SetOrderInCache(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrderInCache", reflect.TypeOf((*MockIService)(nil).SetOrderInCache), order)
}

// SetOrderItems mocks base method.
func (m *MockIService) SetOrderItems(orderUid string, items []model.Item) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrderItems", orderUid, items)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetOrderItems indicates an expected call of SetOrderItems.
func (mr *MockIServiceMockRecorder) SetOrderItems(orderUid, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrderItems", reflect.TypeOf((*MockIService)(nil).SetOrderItems), orderUid, items)
}

// SetOrdersFromDbToCache mocks base method.
func (m *MockIService) SetOrdersFromDbToCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrdersFromDbToCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrdersFromDbToCache indicates an expected call of SetOrdersFromDbToCache.
func (mr *MockIServiceMockRecorder) SetOrdersFromDbToCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrdersFromDbToCache", reflect.TypeOf((*MockIService)(nil).SetOrdersFromDbToCache))
}

// SetPayment mocks base method.
func (m *MockIService) SetPayment(payment model.Payment) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPayment", payment)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPayment indicates an expected call of SetPayment.
func (mr *MockIServiceMockRecorder) SetPayment(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPayment", reflect.TypeOf((*MockIService)(nil).SetPayment), payment)
}
